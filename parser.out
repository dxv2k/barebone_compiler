Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    0
    COPY
    DO
    INIT
    NOT
    NUMBER
    TO
    WHILE

Grammar

Rule 0     S' -> stmt
Rule 1     stmt -> clear_stmt
Rule 2     stmt -> incr_stmt
Rule 3     stmt -> decr_stmt
Rule 4     var -> IDENT
Rule 5     clear_stmt -> CLEAR var ;
Rule 6     incr_stmt -> INCR var ;
Rule 7     decr_stmt -> DECR var ;

Terminals, with rules where they appear

0                    : 
;                    : 5 6 7
CLEAR                : 5
COPY                 : 
DECR                 : 7
DO                   : 
IDENT                : 4
INCR                 : 6
INIT                 : 
NOT                  : 
NUMBER               : 
TO                   : 
WHILE                : 
error                : 

Nonterminals, with rules where they appear

clear_stmt           : 1
decr_stmt            : 3
incr_stmt            : 2
stmt                 : 0
var                  : 5 6 7

Parsing method: LALR

state 0

    (0) S' -> . stmt
    (1) stmt -> . clear_stmt
    (2) stmt -> . incr_stmt
    (3) stmt -> . decr_stmt
    (5) clear_stmt -> . CLEAR var ;
    (6) incr_stmt -> . INCR var ;
    (7) decr_stmt -> . DECR var ;

    CLEAR           shift and go to state 5
    INCR            shift and go to state 6
    DECR            shift and go to state 7

    stmt                           shift and go to state 1
    clear_stmt                     shift and go to state 2
    incr_stmt                      shift and go to state 3
    decr_stmt                      shift and go to state 4

state 1

    (0) S' -> stmt .



state 2

    (1) stmt -> clear_stmt .

    $end            reduce using rule 1 (stmt -> clear_stmt .)


state 3

    (2) stmt -> incr_stmt .

    $end            reduce using rule 2 (stmt -> incr_stmt .)


state 4

    (3) stmt -> decr_stmt .

    $end            reduce using rule 3 (stmt -> decr_stmt .)


state 5

    (5) clear_stmt -> CLEAR . var ;
    (4) var -> . IDENT

    IDENT           shift and go to state 9

    var                            shift and go to state 8

state 6

    (6) incr_stmt -> INCR . var ;
    (4) var -> . IDENT

    IDENT           shift and go to state 9

    var                            shift and go to state 10

state 7

    (7) decr_stmt -> DECR . var ;
    (4) var -> . IDENT

    IDENT           shift and go to state 9

    var                            shift and go to state 11

state 8

    (5) clear_stmt -> CLEAR var . ;

    ;               shift and go to state 12


state 9

    (4) var -> IDENT .

    ;               reduce using rule 4 (var -> IDENT .)


state 10

    (6) incr_stmt -> INCR var . ;

    ;               shift and go to state 13


state 11

    (7) decr_stmt -> DECR var . ;

    ;               shift and go to state 14


state 12

    (5) clear_stmt -> CLEAR var ; .

    $end            reduce using rule 5 (clear_stmt -> CLEAR var ; .)


state 13

    (6) incr_stmt -> INCR var ; .

    $end            reduce using rule 6 (incr_stmt -> INCR var ; .)


state 14

    (7) decr_stmt -> DECR var ; .

    $end            reduce using rule 7 (decr_stmt -> DECR var ; .)

